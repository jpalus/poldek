
tearDown() {
    [ -n "$REPO" ] && rm -rf $REPO/packages.*
    [ -n "$TMPDIR" ] && rm -rf $TMPDIR/*.*
}

setUp() {
    tearDown
}

oneTimeSetUp() {
    [ ! -d "$PWD/sh/lib" ] && fail "$PWD is not a tests directory (missing sh/lib)"
    POLDEK="$PWD/../cli/poldek $QUIET"
    POLDEK_NOCONF="$POLDEK --noconf -Ovfile_retries=1"

    [ ! -d "repo" ] && fail "repo: no such directory"
    SOURCE_REPO="${PWD}/repo"

    [ -z "$TMP" ] && TMP="${TMPDIR}"
    [ -z "$TMP" ] && TMP="${PWD}"
    TMP="${TMP}/poldekTests"
    TMPDIR="$TMP"

    rm -rf $TMPDIR
    mkdir -p $TMPDIR

    [ ! -d $TMPDIR ] && fail "$TMPDIR: no such directory"

    REPO="$TMPDIR/repo"
    REPOURL="test://$TMPDIR/repo/"

    mkdir -p $REPO
    [ ! -d $REPO ] && fail "mkdir $REPO failed?"

    PATH="$PATH:$PWD/sh/lib/"
    POLDEK_UP="$POLDEK --conf ./sh/lib/vftest-fetch.conf --cachedir $TMPDIR"
    cp $SOURCE_REPO/*.rpm $REPO || fail
    tearDown
}

oneTimeTearDown() {
   if echo $TMPDIR | grep -q poldekTest; then rm -rf $TMPDIR; fi
}

die_if_invalid_index() {
    anindex=$1

    [ -f $anindex ] || fail "$anindex not created"
    if echo $anindex | grep -q "diff.toc"; then
       expected_lines=$2

       lines=$(zcat $anindex | wc -l)
       if [ "$lines" != "$expected_lines" ]; then
          fail "$anindex contains $lines lines, expected $expected_lines"
       fi
       return
    fi

    anindex_type="pdir"
    if echo $anindex | grep -q \.ndir\.; then anindex_type="pndir"; fi

    anindex_real_type="pdir"
    if zgrep -q '^tndb[0-9]\.[0-9]' $anindex; then
       anindex_real_type="pndir"
    fi
    
    if [ "$anindex_real_type" != "$anindex_type" ]; then
        fail "invalid $anindex type $anindex_type, real is $anindex_real_type"
    fi

    if zgrep -q 'Contains 0 packages' $anindex; then
        expected_packages=$2
        if [ "$expected_packages" != "0" ]; then
            fail "empty $anindex"
        fi
    fi
}


add_package_to_repo() {
    for p in $(ls $SOURCE_REPO/*.rpm); do 
        [ ! -f $p ] && fail "no packages in $SOURCE_REPO?"
        package=$(basename $p)

        if [ ! -f "$REPO/$package" ]; then
            cp $p $REPO
            msg "Added $package"
            return 0
        fi
    done
}


remove_package_from_repo() {
    package=$(find $REPO -name \*.rpm | head -1)
    rm -f $package
    msg "Removed $(basename $package)"
}

