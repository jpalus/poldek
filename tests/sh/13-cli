#!/bin/sh
# $Id$

# cli

. ./sh/lib/setup
. ./sh/lib/repo-setup
. ./sh/lib/rpm-setup

ORIGREPO=
DESTINATION_REPO=
DEPENDENCY_SOLVER=3

setUp() {
    rpm_up
    # provide /bin/sh auto requirement
    rpm_build_installed sh -p /bin/sh

    RAW_POLDEK="$POLDEK_NOCONF -Ouse_sudo=n"
    POLDEK="$RAW_POLDEK --st pndir -s $REPO --root $DESTINATION_REPO --justdb"
}

tearDown() {
    $POLDEK clean
    rpm_down
}

build() {
    build_package $REPO $@
}

build_installed() {
    rpm_build_installed $@
}

index() {
    $RAW_POLDEK --st dir -s $REPO --index
}

testInstall()
{
    build a
    index

    msg $POLDEK install -v a
    $POLDEK install -v a
    assertEquals "install failed" "$?" "0"
    rpm_state_check "a" ""
}

testUpgrade()
{
    build a -v 2
    build a-libs -v 2
    index

    build_installed a
    build_installed a-libs

    n=$($POLDEK ls -u | grep -E '^(a|a-libs)' | wc -l)
    assertEquals "expected 2 packages to be upgradeable, got $n" "$n" "2"

    msg $POLDEK upgrade -v a\*
    $POLDEK upgrade -v a\*

    #$RPM -ev a --justdb
    #$RPM -ev a-libs --justdb
    #$RPM -qa

    rpm_state_check "a-2,a-libs-2" "a-1,a-libs-1"
}


. ./sh/lib/shunit2
