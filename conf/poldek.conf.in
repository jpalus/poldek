# $Id$

_confdir = @SYSCONFDIR@/poldek
_distro  = pld

%include %{_confdir}/%{_distro}-source.conf

# External downloaders config, not necessary 
#%include fetch.conf

[global]

# NOTE: basename of the directory *must* exists; default is $HOME/.poldek-cache
#cachedir = $HOME/.poldek-cache

# Permits using root privs for installation only; default "no"
#use sudo  = yes

# Loading of /etc/apt/sources.list. The default is "yes" if 
# system wide configuration file is used, "no" if user  
# config ($HOME/.poldekrc) is used
#load apt sources list = yes

# Handle gzipped indexes externally (needed on RH9 and Fedora <= c2).
# This option is a workaround for broken zlib linked into librpm;
# with enabled 'auto zlib in rpm' poldek tries to detect such 
# case and then enables external *.gz handling automatically.
#vfile external compress = yes

# Auto detection of zlib linked into librpm; off by default
auto zlib in rpm = yes


### File downloaders configuration

# Send ${USER}@${HOSTNAME} as anonymous FTP password (by default 
# 'poldek@znienacka.net' is sent)
#vfile ftp sysuser as anon passwd = yes

# HTTP and FTP files poldek uses its internal client (what is recommended),
# but it can be changed using "default_fetcher". The syntax is:
# default fetcher = <PROTOCOL>[,<PROTOCOL>...]:<FETCHER_NAME>
# where FETCHER name is one of configured fetchers (see fetch.conf).

#default fetcher = ftp,http:internal
#default fetcher = https:wget
# vfjuggle is cdrom getter supplied with poldek
#default fetcher = cdrom:vfjuggle

## Proxies for internal downloaders
# Proxies may be configured as usual by environment variable 
# ({http,ftp}_proxy or using "proxy" parameter. Its syntax 
# is similar to "default fetcher" one:
# proxy = <PROTOCOL>[,<PROTOCOL>...]:<PROXY_URL>, eg:
# proxy = http: http://w3cache.foo.org:8080


###############################################################
# Installation options
#

# Install packages in small groups instead of doing all-or-nothing 
# installations; default "yes"
#particle install = no

# Do not remove downloaded packages after successful installation; default "no"
#keep downloads = yes

# Uncomment this if you're using system with rpm < 4.2.1; defalut "no"
#promoteepoch = yes

# Confirm each installation; default "no"
#confirm installation = yes

# Confirm each removal; default "yes"
#confirm removal = no

# Let the user select package among equivalents 
#choose equivalents manually = yes

# Prevent kernel* and dev from being upgraded if they are already installed.
#hold   = kernel* dev

# Ignore package list, packages fits given mask won't be visible 
#ignore   = *-smp-* foo*

# Conflicts with already installed packages are treated as resolved 
# if at least one of multiple-installed package satisfies conflict. 
# RPM doesn't support such cases, so --pm-nodeps is needed (use with 
# care); option is set to "on" by default. 
#allow duplicates = no

##############################################################
# RPM specific options
# macros
#rpmdef        = _install_langs pl:pl_PL:lt:lt_LT

# don't install any documentation
#rpmdef        = _netsharedpath /usr/share/info:/usr/share/man
#rpmdef	       = _excludedocs 1


##############################################################
# Subtle dependency processing settings, shouldn't be changed 
# unless you know what you're doing. 

# Automatically install packages required by installed ones; default "yes"
#follow = no

# Greedy upgrades, i.e. upgrade packages which dependencies are broken
# by being uninstalled ones; defalut "yes"
#greedy = no

# Be yet more greedy; if successor of orphaned package found, and this 
# successor drags no packages then upgrade the package. Its value 
# is implied by 'greedy' option by defalut.
#aggressive_greedy = no

# "mercy" dependency checking; defalut "no". Use with care, it may cause
# strange dependency errors.
#mercy = yes

# Taking into accout package Obsoletes; defalut "yes"
#obsoletes = yes

# Taking into accout package Conlicts; defalut "yes"
#conflicts = yes


