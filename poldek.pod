=pod
 $Id$
=cut

=head1 NAME

poldek - rpm packages management helper tool

=head1 SYNOPSIS

poldek [--source=SOURCE ...] [OPTION...] [PACKAGE...]
poldek [--source=SOURCE ...] --shell

=head1 DESCRIPTION

The poldek is designed to automate the verify, install and upgrade 
of rpm packages. It can be used in two ways: as cmdline tool or as 
interactive tool. It was inspired by L<apt_get(8)> from Debian's 
APT, the interactive mode was inspired by shell mode of Perl CPAN module
($ perl -MCPAN -e shell). 

In general poldek gets packages information from special package index
file (called I<packages.dir>) and performs one of the following actions:

=over

=item * Build package index

=item * Update package index

=item * Verify package set

=item * Install system from scratch

=item * Upgrade whole system

=item * Install or upgrade custom packages 

=item * Split package set into fixed size package sets 

=back

Packages and indexes can be retrieved from remote servers by poldek
itself (by compiled in cURL client or by simple FTP/HTTP client from rpmlib) 
or by external downloaders (not configured by default, see L</CONFIG FILE> for
details). 

=head2 Interactive Mode

The interactive mode is entered by running

    poldek [OPTION...] --shell [-f]

which puts you into a readline interface. Once you are on the command 
line, type 'help' and the rest should be self-explanatory.

[to be continued...]

=head1 SPECIFING SOURCE

The source is specified by B<--source> option or B<source> parameter 
in config file:

B<--source,--sidx,--sdir,-s> B<SOURCE>

where SOURCE can be a local path or URL. 

Examples:

=over

=item $ poldek -s /dir/with/RPMS/ [OPTION...]

=item $ poldek -s /dir/with/RPMS/packages.dir [OPTION...]

=item $ poldek -s ftp://ftp.ala.ma.kota/RPMS/packages.dir

=item $ poldek -s rsync://rsync.ala-ma-kota.com/RPMS/

=back

If you want to build packages.dir, then only one and only directory
path as SOURCE is accepted.

If packages.dir and packages are stored in diffrent
locations then option:

B<-P, --prefix> B<PREFIX>

could be used to point packages one, e.g.:

$ poldek -s /tmp/packages.dir --prefix=/cdrom/RPMS/ -s ... --prefix=...

Another parameter is B<--cachedir=DIR>, which points to
directory where fetched packages and indexes are 
store (default is /tmp).

=head1 SPECIFING PACKAGES

Packages could be specified in three ways:

=over

=item * as packages files in arguments:

$ poldek ...  ala-ma-kota-2.1-2.i386.rpm

=item * as packages names with its name, or if EVR must be set, with:

B<-n, --pkgnevr="NAME [[E:][V[-R]]]">

for example:

$ poldek ...  gzip ziptool 

$ poldek ... -n "apache 1.3.12" 

$ poldek ... -n "Bezdany 1:908.9-26"

=item * as package sets taken from pkgset files B<-p, --pkgset=FILE>,
(see README.package-sets):

$ poldek ... -p ../package-sets/tiny-system

=back

All above options could be combined. Note that specified packages
should be present in SOURCE. 

=head1 BASIC MODES

One of the following basic modes must be selected:

=over 4

=item B<--mkidx[z][=FILE]>  

Build package index, by default it's stored in SOURCE/packages.dir[.gz].
The other two files are created: packages.dir.md with coputed packages.dir 
digest and packages.dir.toc[.gz] with packages NAME-EVR per line.
I<NOTE>: SOURCE must be directory.

=item B<--update>   

Resynchronize the package index from its source and verify it. 
For local sources it only verifies packages.dir using its digest
from packages.dir.md. 

=item B<-V|--verify>

This option checks dependenecies and conflicts of package set.
Without packages specified it checks all packages.

=item B<--intall-dist[=DIR]>

Install system from scratch under DIR as root directory (/).
Needs packages to be specified.

=item B<--upgrade-dist[=DIR]>

Install the newest versions of all packages currently installed 
on the system from the specified source (see L</SOURCE>).

=item B<-i, --install|-U, --upgrade>

Install or upgrade given packages.


=item B<--shcmd=COMMAND>

Run interactive mode command and exit.

=item B<--shell>

Run poldek in interactive mode. Type "help" after running for available commands. 

=item B<--split=SIZE[:FIRST_FREE_SPACE]  [--split-conf=FILE] [--split-out=PREFIX]>

Split package set into parts, each SIZE MB size, the first part will
be FIRST_FREE_SPACE MB smaller. 

Package priorities are taken from FILE given by --split-conf (see sample 
pkgsplit.conf from distribution). By default packages has 0 priority.

Each part is written as NAME-EVR.ARCH.rpm list to PREFIX.XX 
file, the default PREFIX is "packages.chunk"


=back 

=head2 Options for install modes

=over

=item B<--dump[=FILE]> 

Just dump packages file names to FILE or stdout instead of install them.


=item B<--dumpn[=FILE]> 

Just dump packages names to FILE or stdout instead of install them.


=item B<--fetch=DIR> 

Like B<--dump> but packages are downloaded to DIR


=item B<-F, --fresh> 

Upgrade packages, but only if an earlier version currently installed.
I<Note> that equivalent of "rpm --freshen" is "poldek --fresh --nofollow"

=item B<--greedy> 

Automatically upgrade packages which dependencies are broken
by unistalled ones, for example if package foo is upgraded 
from version 1.0 to 1.2 and package foo-devel is already installed 
with requirement "foo = 1.0" than poldek upgrade foo-devel to version 
1.2 too.

=item B<--hold=PACKAGE[,PACKAGE]...>

Prevent packages listed from being upgraded if they are already installed.
If option is not given packages to hold is taken from $HOME/.poldek_hold.

=item B<--nodeps>; B<-t, --test>; B<--justdb>; B<--force>; B<--root>;

Have the same meanings like RPM ones. See next section.


=item B<-N, --nofollow> 
Don't automatically install packages required by selected ones.


=item B<-N, --nohold> 
Don't take held packages from $HOME/.poldek_hold.


=item B<--rpmdef="NAME VALUE"> 

Like rpm's --define option.


=head1 COOPERATING WITH RPM

Currently all installations except B<install-dist> are made
by RPM binary, which is executed in background. Options passed to rpm:

=over

=item * --root 

=item * --force 

=item * --install

=item * --justdb

=item * --nodeps

=item * --test

=item * --upgrade 

=item * --rpmdef (passed as --define)

=back

=head2


Other rpm options may be passed as arguments like B<--rpm-RPM_LONG_OPTION>,
e.g:

$ poldek ... -- --rpm-noscripts --rpm-notriggers


=head1 CONFIG FILE

Program tries to read configuration from F<$HOME/.poldekrc>
by default, B<-c,--conf> option could points to other location.
With B<--noconf> poldek don't read any config. 

Config file consists of parameters of the form

'name = value'

The file is line-based - that is, each newline-terminated
line represents a comment or a parameter.

=head2 Parameters:

=over

=item * B<source> - see B<-s> option description

=item * B<sourceXX> - see B<-s> option description

=item * B<prefixXX> - see B<-p> option description
	
	Prefixed source should be specified in config by 
	suffixed source/prefix pair to distinguish this source 
	from other specified sources.  

=item * B<cachedir> - see B<--cachedir> option description

=item * B<use_sudo = yes|no> - for r/w operations poldek will 
                              run rpm using sudo. 

=item * B<follow = yes|no> - automatically install|don't install 
   packages required by selected ones (default: yes)

=item * B<greedy = yes|no> - see --greedy option description
	(default: no)

=back

=head1

Downloaders are configured by B<PROTOCOL_get="SPEC"> parameter.  The
SPEC is a command formatted string, where at least 2 semi-macros of 4
available should be used:

=over 

=item B<%p[n]> - package file name, %pn means that may be repeated many times 

=item B<%P[n]> - package full path, %Pn -"-

=item B<%d> - cache directory

=item B<%D> - cache directory/package basename

=back

=head1

Currently four protocols are available: FTP, HTTP, HTTPS and RSYNC.  Special
B<ftp_http> "protocol" could be used for describe downloader for both
HTTP and FTP. 

Examples:

ftp_http_get   = "/usr/bin/wget -N --dot-style=binary -P %d %Pn"

ftp_get        = "/usr/bin/curl %P -o %D"

ftp_get        = "/usr/bin/snarf %P %D"

rsync_get      = "/usr/bin/rsync -v %P %d"

See also sample configs included in distribution.


Additionally poldek supports CDROM URLs which could be used when package set 
is stored on removable media (several CDs, ZIPs, etc); as  CDROM "downloader"
vfjuggle should be configured, see poldekrc.sample-cdrom for details.

=head1 EXAMPLES

=head2 Package index creation

$ poldek -s /cdrom/PLD/RPMS/ --mkidx=/tmp/packages.dir

$ poldek -s /ftp/pub/PLD/RPMS/ --mkidxz

Using mkpackagedir script:

$ mkpackagedir /ftp/pub/PLD/i686/RPMS/  /ftp/pub/PLD/sparc/RPMS/ 

=head2 Verification

$ poldek -s rsync://ala.ma.kota/PLD/RPMS/ -V

$ poldek -s /dir/with/RPMS/packages.dir -V apache

=head2 Installation from scratch

$ poldek -s ftp://ftp.trurl.net/PLD/RPMS/ 
  --install-dist=/mnt/dest -p ftp://home.net/my-pkgsets/myset

Above command installs a "myset" package subset under 
/mnt/dest as root. 

=head2 Upgrade whole system:

$ poldek -s ftp://ftp.tatry.pl/PLD/RPMS/packages.dir --upgrade-dist

Only fetch packages marked for upgrade:

$ poldek -s ftp://ftp.rankiem.net.pl/PLD/RPMS/
  --upgrade-dist --fetch=/tmp/PLD-up/

Dump packages filenames marked for upgrade:

$ poldek -s ftp://ftp.pld.org.pl/PLD/RPMS/ 
 --upgrade-dist --dump=/tmp/PLD-up-`date +%Y.%m.%d`

Test only:

$ poldek -s ftp://ftp.pociemku.org/PLD/RPMS/packages.dir 
  --upgrade-dist --test


=head2 Install/upgrade custom packages:

$ poldek -s ftp://ftp.znienacka.com/PLD/RPMS/
-U apache -n "ala-ma-kota 1.2" smail-12-389.i386.rpm

$ poldek -s ftp://ftp.dudy.net/RPMS/ -ti xteddy

=head2 Splitting the set into 100 MB chunks:

$ poldek --split=100 --split-conf=zip-split.conf \
   --split-out=/tmp/zipchunk

=head1 ENVIROMENT

$HOME is used to read config file.

$TMPDIR (if set) is used as temporary directory if no cachedir 
specified.

=head1 BUGS

=head2 File conflicts

Conflicts are detected by comparision files sizes and modes only,
which means that not all conflicts may be detected because files MD5
sums are not compared (including they will increase memory consumption
too much).

=head2 Upgrade and "Obsoletes" RPM tag

In PLD I<http://www.pld.org.pl>, which is primary developement
platform for poldek, Obsoletes tag is used in two diffrent meanings:
the first means B<A> I<obsoletes> B<B>, the second means B<A> I<is
equivalent of> B<B>. Obviously it makes impossible to distinguish them
and use during upgrades (in Red Hat Linux only the first mean is used,
so Red Hat Installer use this tag).

=head2 Upgrade and more than one instance of the package

rpm doesn't handle this case, so poldek does not handle it also.

=head2 Requirements processing 

As far as I test poldek, it completely resolves package dependenecies
(not file conflicts) during installs and upgrades. Please let me know 
if you'll notice that rpm shows unsatisfied dependenecies while poldek 
not. 

=head2 Documentation

This manual should be finished and translated into English.

=head1 CAUTION

The program is in B<beta> stage and surely contains the bugs. 
Backup your RPM database and be watchfull. Remember, that
there is I<NO WARRANTY OF ANY KIND> and enjoy.

=head1 LICENSE

This program is distributed under the terms of GNU General Public License.

=head1 AUTHOR

Pawel A. Gajda <mis@pld.org.pl>

=head1 CONTACT

Please send comments, bug reports, etc to the author.

=head1 SEE ALSO

L<curl(1)>, L<rpm(1)>, L<rsync(1)>, L<snarf(1)>, L<wget(1)>

=cut
