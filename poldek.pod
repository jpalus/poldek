=pod
 $Id$
=cut

=head1 NAME

poldek - rpm packages management helper tool

=head1 SYNOPSIS

poldek [--source=SOURCE ...] [OPTION...] [PACKAGE...]

poldek [--source=SOURCE ...] 

=head1 DESCRIPTION

The poldek is designed to automate the verify, install and upgrade 
of rpm packages. It can be used in two modes: batch and interactive. 
It was inspired by L<apt-get(8)> from Debian's APT and by interactive mode 
of Perl CPAN module ($ perl -MCPAN -e shell). 

In general poldek gets packages information from special package index
file (I<packages.dir.gz> by default) and performs one of the following actions:

=over

=item * Build package index

=item * Update package index

=item * Verify package set

=item * Install system from scratch

=item * Upgrade whole system

=item * Install or upgrade desired packages 

=item * Split package set into fixed size package sets 

=back

Remote files can be retrieved from remote servers by poldek
itself (by internal FTP client or compiled in cURL) or by external 
downloaders (not configured by default, see L</CONFIG FILE> for
details). 

=head2 Interactive Mode

The interactive mode is entered by running

    poldek [OPTION...] --shell [-f]

which puts you into a readline interface. Once you are on the command 
line, type 'help' and the rest should be self-explanatory.

[to be continued...]

=head1 SPECIFYING SOURCE

The source is specified by B<--source> option or B<source> parameter 
in config file:

B<-s, --source> B<SOURCE>

where SOURCE can be a local path or URL. 

Examples:

=over

=item $ poldek -s /dir/with/RPMS/ [OPTION...]

=item $ poldek -s /dir/with/RPMS/packages.dir [OPTION...]

=item $ poldek -s ftp://ftp.ala.ma.kota/RPMS

=item $ poldek -s rsync://rsync.ala-ma-kota.com/RPMS/

=back

If package index and packages are stored in different
locations then option:

B<-P, --prefix> B<PREFIX>

could be used to point packages location, e.g:

$ poldek -s /tmp/packages.dir.gz --prefix=/cdrom/RPMS/ -s ... --prefix=...

If source is configured with the name (see L</CONFIG FILE>) then it 
could be specified by B<-n, --sn> B<SOURCE-NAME>, e.g:

$ poldek --sn pld-dist ...

=head1 SPECIFYING PACKAGES

Packages could be specified in three ways:

=over

=item * as packages files in arguments:

$ poldek ...  ala-ma-kota-2.1-2.i386.rpm

=item * as package name mask, or if EVR must be set, with:

B<--nevr="NAME [[E:][V[-R]]]">

for example:

$ poldek ...  apache

$ poldek ...  'apache*'

$ poldek ... --nevr "apache 1.3.12" 

=item * as package set taken from file B<--pset=FILE>,
(see README.package-sets):

$ poldek ... --pset ~/.package-sets/tiny-system

=back

All above options could be combined. Note that specified packages
should be present in SOURCE. 

=head1 BASIC MODES

One of the following basic modes must be selected:

=over 4

=item B<--mkidx[z][=FILE]>  B<[--nodiff]>

Build package index, by default it's stored in SOURCE/packages.dir[.gz].
The other two files are created: packages.dir.mdd with computed packages.dir's 
digest and packages.dir.toc[.gz] with packages NAME-EVR per line.

Additionally if previous package index is different from 
currently created one then index "patch" is created 
under SOURCE/packages.i/ directory. Every patch consist of two 
files: packages.dir.diff.YYYY.MM.DD-HH.mm.SS.gz and 
packages.dir.diff.YYYY.MM.DD-HH.mm.SS.mdd. 

Outdated patches are automatically removed. 

With B<--nodiff> patches are not created.

I<NOTE>: In this mode only one and only directory path as SOURCE is accepted.

=item B<--up, --update>; B<--upa, --update-whole>   

Re-synchronize the package index from its source and verify it. 

With B<--update> program looking up "patches" for existing local
package index, if it fails, then whole index is downloaded.

With B<--update-whole> program updates whole package index

For local sources program verifies existing index 
integrity using its digest from packages.dir.mdd. 

=item B<-V|--verify>

This option verifies dependencies of package set.
Without packages specified it checks all available packages.

=item B<--install-dist[=DIR]>

Install system from scratch under DIR as root directory (/).
Needs packages to be specified.

=item B<--upgrade-dist[=DIR]>

Install the newest versions of all packages currently installed 
on the system from the specified source (see L</SOURCE>).

=item B<-i, --install|-u, -U, --upgrade>

Install or upgrade given packages.

=item B<--shcmd=COMMAND>

Run interactive mode command COMMAND and exit.

=item B<--shell>

Run poldek in interactive mode. Type "help" after running for available commands. 
This is the default poldek's mode. 

=item B<--split=SIZE[:FIRST_FREE_SPACE]  [--split-conf=FILE] [--split-out=PREFIX]>

Split package set into parts, each SIZE MB size. The first part will
be FIRST_FREE_SPACE MB smaller. 

Package priorities are taken from FILE given by --split-conf (see sample 
pkgsplit.conf from program distribution). By default packages has 0 priority.

Each part is written as NAME-EVR.ARCH.rpm list to PREFIX.XX 
file, the default PREFIX is "packages.chunk"

=back 

=head2 Options for install modes

=over

=item B<--dump[=FILE]> 

Just dump packages file names to FILE or stdout instead of install them.

=item B<--dumpn[=FILE]> 

Just dump packages names to FILE or stdout instead of install them.

=item B<--fetch[=DIR]> 

Like B<--dump> but packages are downloaded and stored in poldek's cache
directory by default

=item B<-F, --fresh> 

Upgrade packages, but only if an earlier version currently installed.
I<Note> that equivalent of "rpm --freshen" is "poldek -u/-i --fresh --nofollow"

=item B<-G, --greedy> 

Automatically upgrade packages which dependencies are broken
by unistalled ones, for example if package foo is upgraded 
from version 1.0 to 1.2 and package foo-devel is already installed 
with requirement "foo = 1.0" than poldek upgrade foo-devel to version 
1.2 too.

=item B<--hold=PACKAGE[,PACKAGE]...>

Prevent packages listed from being upgraded if they are already installed.
If option is not given then packages to hold are taken from B<hold> configuration 
option and additionally from $HOME/.poldek_hold. Held package won't be upgraded 
with exception if it will be pointed directly by the user.

=item B<-m, --mercy>

Be tolerant for unmatched versioned dependencies which RPM tolerates, e.g.
package A requires capability foo >= 1.0 while package B provides "foo"
without any version.

=item B<--nodeps>; B<--justdb>; B<--force>; B<--root>;

Have the same meanings like RPM ones. See next section.

=item B<-N, --nofollow> 

Don't automatically install packages required by selected ones.

=item B<--nohold> 

Don't take held packages from $HOME/.poldek_hold nor config's hold parameter.

=item B<--rpmdef="NAME VALUE"> 

Like rpm --define option.

=item B<-t, --test>

Do not install packages, but tell if it would work or not. Given once 
causes poldek's checks only, to perform full tests using rpm, option
must be given twice.

=back

=head1 OTHER OPTIONS

=over

=item B<--cachedir=DIR>

DIR points to directory where downloaded files will be stored.
If option not set then $TMPDIR is used. If $TMPDIR isn't set
then $HOME/.poldek-cache is created and used as cache directory.

=item B<--log=FILE>

Log all poldek messages to FILE

=back

=head1 COOPERATING WITH RPM

Currently all installations except B<install-dist> are made
by RPM binary, which is executed in background. Options passed to rpm:

=over

=item * --root 

=item * --force 

=item * --install

=item * --justdb

=item * --nodeps

=item * --test (must be given twice, see above --test description)

=item * --upgrade 

=item * --rpmdef (passed as --define)

=back

=head2


Other rpm options may be passed as arguments like B<--rpm-RPM_LONG_OPTION>,
e.g:

$ poldek ... -- --rpm-noscripts --rpm-notriggers


=head1 CONFIG FILE

Program tries to read configuration from F<$HOME/.poldekrc>; if it doesn't
exists then F</etc/poldek.conf> is used. B<-c,--conf> option could points to 
other config location. With B<--noconf> poldek doesn't read any config. 

Config file consists of parameters of the form

'name = value'

The file is line-based - that is, each newline-terminated
line represents a comment or a parameter.

=head2 Parameters:

=over

=item * B<source> = [NAME[,OPTIONS]] SOURCE_PATH

Optional B<NAME> may be specified later from cmdline by
B<-n, --sn> B<SOURCE-NAME>; for example if you 
have sources configured as follows:

source = pld-devel     /mnt/PLD-stable/RPMS

source = pld-stable    ftp://zn/PLD/i686/PLD/RPMS

source = misRPMS       ftp://zn/rpm/RPMS/

then to use only ftp://zn/PLD/i686/PLD/RPMS do:

$ poldek --sn pld-stable 

..and to use all pld-* do:

$ poldek --sn pld-\*


B<OPTIONS> describes source options; possible values are:

=over

=item * B<noauto> - don't load this source by default

=item * B<noautoup> - don't update this source by default

=item * B<gpg> - verifiy package GPG signatures

=item * B<pgp> - verifiy package PGP signatures

=back

Examples:

source = pld,gpg,noautoup       ftp://zn/PLD/ra/RPMS

source = pld-test,noauto       /mnt/PLD-test/RPMS

source = rare,noautoup         ftp://host/rare-RPMS


=item * B<sourceXX> = SOURCE

=item * B<prefixXX> = SOURCE

If you want to configure source with prefix (see B<-P> option description), 
then it should be specified as suffixed source/prefix pair to distinguish 
that source from other ones, for example:

source1 = ~/tmp/my-cd-indexes/

prefix1 = /mnt/cdrom/RPMS/


=item * B<cachedir> 

       See B<--cachedir> option description

=item * B<use_sudo = yes|no> 

      For r/w operations run rpm using sudo. 
      The default is "no", but it is recommended to change it to "yes" 
      and use the poldek as ordinary user.


=item * B<follow = yes|no> 

       Automatically install|don't install packages required by 
       selected ones (default: yes)


=item * B<greedy = yes|no> 
       
        See --greedy option description	(default: no)


=item * B<hold = PACKAGE[ PACKAGE...]> 

        See --hold option description


=item * B<mercy = yes|no> 

        See --mercy option description


=item * B<keep_downloads = yes|no> 

        Program removes downloaded packages files after successful installation
        by default. If option is set to "yes" then program will never remove 
        downloaded packages from cache directory.


=item * B<confirm_installs = yes|no>

        If "yes" program confirm all performed package installations (default: no)


=item * B<choose_equivalents_manually = yes|no> 

        If "yes" program let the user choose among equivalent packages (default: no)
        

=item * B<particle_install = yes|no>

        If "no" installations of multiple packages are performed as one 
        transaction (default: yes)

=back

=head3 External "downloaders"

Downloaders are configured by B<PROTOCOL_get="SPEC"> parameter.  The
SPEC is a command formatted string, where at least 2 semi-macros of 4
available should be used:

=over 

=item B<%p[n]> - package file name, %pn means that %p may be repeated many times 

=item B<%P[n]> - package full path, %Pn -"-

=item B<%d> - cache directory

=item B<%D> - cache directory/package base name

=back

Currently four protocols are available: FTP, HTTP, HTTPS and RSYNC.  Special
B<ftp_http> "protocol" could be used for describe downloader for both
HTTP and FTP. 

Examples:

ftp_http_get   = "/usr/bin/wget -N --dot-style=binary -P %d %Pn"

ftp_get        = "/usr/bin/curl %P -o %D"

ftp_get        = "/usr/bin/snarf %P %D"

rsync_get      = "/usr/bin/rsync -v %P %d"

See also sample configs included in distribution.


Additionally poldek supports CDROM URLs which could be used when package set 
is stored on removable media (several CDs, ZIPs, etc); as  CDROM "downloader"
vfjuggle should be configured, see poldekrc.sample-cdrom for details.

=head1 EXAMPLES

=head2 Package index creation

$ poldek -s /cdrom/PLD/RPMS --mkidxz=/tmp/packages.dir.gz

$ poldek -s /ftp/pub/PLD/RPMS --mkidxz

Using mkpackagedir script:

$ mkpackagedir /ftp/pub/PLD/i686/RPMS /ftp/pub/PLD/sparc/RPMS

=head2 Verification

$ poldek -s rsync://ala.ma.kota/PLD/RPMS/ -V

$ poldek -s /dir/with/RPMS -V apache

=head2 Installation from scratch

$ poldek -s ftp://ftp.trurl.net/PLD/RPMS/ 
  --install-dist=/mnt/dest --pset ftp://home.net/my-pkgsets/myset

Above command installs a "myset" package subset under 
/mnt/dest as root. 

=head2 Upgrade whole system:

$ poldek -v -s ftp://ftp.tatry.pl/PLD/RPMS/ --upgrade-dist --log=~/tmp/poldek.log

Only fetch packages marked for upgrade:

$ poldek -s ftp://ftp.rankiem.net.pl/PLD/RPMS/
  --upgrade-dist --fetch=/tmp/PLD-up/

Dump packages filenames marked for upgrade:

$ poldek -s ftp://ftp.pld.org.pl/PLD/RPMS/ 
 --upgrade-dist --dump=/tmp/PLD-up-`date +%Y.%m.%d`

Test only:

$ poldek -s ftp://ftp.pociemku.org/PLD/RPMS/
  --upgrade-dist --test

=head2 Install/upgrade particular packages:

$ poldek -s ftp://ftp.znienacka.com/PLD/RPMS/
-u apache --nevr "ala-ma-kota 1.2" smail-12-389.i386.rpm

$ poldek -s ftp://ftp.dudy.net/RPMS/ -ti xteddy

=head2 Splitting the set into 100 MB chunks:

$ poldek --split=100 --split-conf=zip-split.conf \
   --split-out=/tmp/zipchunk

=head2 Execute shell command:

$ poldek --shcmd='ls -lt' | less


=head1 ENVIROMENT

$HOME is used to read config file.

$TMPDIR (if set) is used as temporary directory if no cachedir 
specified.

=head1 FILES

/etc/poldek.conf 

$HOME/.poldekrc

$HOME/.poldek_hold

$HOME/.poldek-cache/

=head1 BUGS

=head2 File conflicts

Conflicts are detected by comparison files sizes and modes only,
which means that not all conflicts may be detected because files MD5
sums are not compared (including they will increase memory consumption
too much).

=head2 Upgrade and "Obsoletes" RPM tag

In PLD I<http://www.pld.org.pl>, which is primary development
platform for poldek, Obsoletes tag is used in two different meanings:
the first means B<A> I<obsoletes> B<B>, the second means B<A> I<is
equivalent of> B<B>. Obviously it makes impossible to distinguish them
and use during upgrades (in Red Hat Linux the first mean is used only,
so Red Hat Installer use this tag).

=head2 Upgrade and more than one instance of the package

rpm doesn't handle this case, so poldek does not handle it also.

=head2 Dependencies processing 

As far as I test poldek, it completely resolves package dependencies
(not file conflicts) during installs and upgrades. Please let me know 
if you'll notice that rpm shows unsatisfied dependencies while poldek 
not. 

=head2 Documentation

This manual should be finished and translated into English.

=head1 CAUTION

The program surely contains the bugs. Backup your RPM database and be 
watchful. Remember, that there is I<NO WARRANTY OF ANY KIND> and enjoy.

=head1 LICENSE

This program is distributed under the terms of GNU General Public 
License, version 2.

=head1 AUTHOR

Pawel A. Gajda <mis@pld.org.pl>

=head1 CONTACT

Please send comments, bug reports, etc to the author.

=head1 SEE ALSO

L<apt(1)> <apt-get(8)>, L<curl(1)>, L<rpm(1)>, L<rsync(1)>, L<snarf(1)>, L<wget(1)>

=cut
